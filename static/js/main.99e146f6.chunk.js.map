{"version":3,"sources":["redux/reducer/test.js","redux/reducer/reducer.js","redux/store.js","containers/pages/Top.jsx","containers/pages/Test.jsx","Root.jsx","App.js","serviceWorker.js","index.js"],"names":["test","state","arguments","length","undefined","action","type","Object","objectSpread","date","rootReducer","combineReducers","persistConfig","key","storage","persistedReducer","persistReducer","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","persistor","persistStore","Body","styled","div","_templateObject","Top","gotoTest","e","_this","props","history","push","_this2","this","react_default","a","createElement","onClick","class","Component","Test_templateObject","Info","_templateObject2","Reset","_templateObject3","Test","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","gotoTop","persistClear","dispatch","Date","str","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","console","log","setState","Test_Body","connect","Root","es","integration_react","loading","react_router_dom","style","width","height","react_router","exact","path","component","App","Root_Root","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App","document","getElementById","URL","process","href","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.99e146f6.chunk.js","sourcesContent":["const test = (state = [], action) => {\n    switch (action.type) {\n        case 'LOGIN':\n            return {\n                ...state,\n                date: action.date\n            };\n        case 'CLEAR':\n            return {\n                ...state,\n                date: '---'\n            };\n        default:\n            return state;\n    }\n  }\n  \n  export default test;","import { combineReducers } from 'redux'\nimport test from './test'\n\nconst rootReducer = combineReducers({\n  test,\n});\n\nexport default rootReducer;","import { createStore } from 'redux'\nimport { persistReducer, persistStore } from 'redux-persist'\nimport storage from 'redux-persist/lib/storage'\n\nimport rootReducer from './reducer/reducer'\n\n// 永続化の設定\nconst persistConfig = {\n  key: 'root', // Storageに保存されるキー名を指定する\n  storage, // 保存先としてlocalStorageがここで設定される\n}\n\n// 永続化設定されたReducerとして定義\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\n\nconst store = createStore(\n  persistedReducer,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n)\n\nexport const persistor = persistStore(store);\nexport default store;","import React, {Component} from 'react';\nimport styled from 'styled-components';\nimport '../../common.css';\n\nconst Body = styled.div `\n    width: 100%;\n    height: 100%;\n    background-color: #6297ff;\n    color: #fff;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    font-size: 48px;\n`;\n\nclass Top extends Component {\n    gotoTest = (e) => {\n        this.props.history.push('test');\n    }\n    render(){\n        return (\n            <Body>\n                PWA\n                <div onClick={e => this.gotoTest(e)}>\n                <i class=\"far fa-arrow-alt-circle-right\"></i>\n                </div>\n            </Body>\n        );\n    }\n};\n\nexport { Top };","import React, {Component} from 'react';\nimport { connect } from 'react-redux';\nimport styled from 'styled-components';\nimport '../../common.css';\n\nconst Body = styled.div `\n    width: 100%;\n    height: 100%;\n    background-color: #ff5da2;\n    color: #fff;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    font-size: 48px;\n`;\n\nconst Info = styled.div `\n    position: absolute;\n    top: 10%;\n    left: 50%;\n    font-size: 12px;\n    transform: translateX(-50%);\n`;\nconst Reset = styled.div `\n    display: inline-block;\n    padding: 2px 20px;\n    margin: 5px;\n    border: 1px solid #fff;\n    border-radius: 20px;\n`;\n\nclass Test extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            date: this.props.date,\n        };\n    }\n    componentDidMount() {\n        if(!this.props.date || this.props.date === '---'){\n            const date = new Date();\n            let str = date.getFullYear() + '/' + (date.getMonth()+1) + '/' + date.getDate();\n            str = str + ' ' + date.getHours() + ':' + date.getMinutes() + ':' + date.getSeconds();\n            this.props.dispatch({\n                type: 'LOGIN',\n                date:  str,\n            });\n        }\n    }\n    componentWillReceiveProps(props) {\n        console.log(props.date);\n        this.setState({date: props.date});\n    }\n    gotoTop = (e) => {\n        this.props.history.push('');\n    }\n    persistClear = (e) => {\n        this.props.dispatch({\n            type: 'CLEAR',\n        });\n    }\n    render(){\n        return (\n            <Body>\n                <Info>\n                    {this.state.date}<br/>\n                    <Reset onClick={e => this.persistClear(e)}>Clear</Reset>\n                </Info>\n                TEST\n                <div onClick={e => this.gotoTop(e)}>\n                <i class=\"far fa-arrow-alt-circle-left\"></i>\n                </div>\n            </Body>\n        );\n    }\n};\n\nconst mapStateToProps = (state) => { \n    return {\n      date: state.test.date\n    };\n}\n\nexport default connect(mapStateToProps)(Test);","import React, {Component} from 'react';\nimport { Provider } from 'react-redux'\nimport { PersistGate } from 'redux-persist/integration/react'\nimport store, { persistor } from './redux/store'\n\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom'\n\nimport { Top } from './containers/pages/Top';\nimport Test from './containers/pages/Test';\n\nconst Root = () => (\n  <Provider store={store}>\n  <PersistGate loading={null} persistor={persistor}>\n    <Router>\n        <div style={{width: \"100%\", height: \"100%\"}}>\n          <Switch>\n            <Route exact path='/' component={Top} />\n            <Route path='/test' component={Test} />\n          </Switch>\n        </div>\n      </Router>\n  </PersistGate>\n  </Provider>\n)\nexport { Root };\n","import React from 'react';\nimport { Root } from './Root';\nimport './App.css';\n\nfunction App() {\n  return (\n        <Root />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}